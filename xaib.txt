The Git Data Model
In computer science speak, the Git object data is a directed acyclic graph.
That is, starting at any commit you can traverse its parents in one direction
and there is no chain that begins and ends with the same object.
All commit objects point to a tree and optionally to previous commits.
All trees point to one or many blobs and/or trees.
Given this simple model, we can store and retrieve vast histories of complex trees of arbitrarily changing content quickly and efficiently.
This section is meant to demonstrate how that model looks.
References
In addition to the Git objects, which are immutable – that is,
they cannot ever be changed,
there are references also stored in Git.
Unlike the objects, references can constantly change.
They are simple pointers to a particular commit,
something like a tag,
but easily moveable.
Examples of references are branches and remotes.
A branch in Git is nothing more than a file in the .git/refs/heads/ directory
that contains the SHA-1 of the most recent commit of that branch.
To branch that line of development, all Git does is create a new file in that directory that points to the same SHA-1.
As you continue to commit,
one of the branches will keep changing to point to the new commit SHA-1s,
while the other one can stay where it was.
If this is confusing, don’t worry.
We’ll go over it again later.
The basic data model I’ve been explaining looks something like this:
The cheap references I’ve represented as the grey boxes,
the immutable objects are the colored round cornered boxes.
