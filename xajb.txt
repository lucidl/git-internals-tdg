Notice how the other two blobs that were not changed were not added again.
The new trees that were added point to the same blobs in the data store that the previous trees pointed to.
Now let’s say we modify the init.rb file at the base of the project.
The new blob will have to be added, which will add a new top tree,
but all the subtrees will not be modified,
so Git will reuse those references.
Again, the branch reference will move forward and the new commit will point to its parent.
At this point, let’s stop to look at the objects we now have in our repository.
From this, we can easily recreate any of the three directories we committed by following the graph from the most recent commit object,
and having Git expand the trees that are pointed to.
For instance, if we wanted the first tree, we could look for the parent of the parent of the HEAD,
or the parent of the tag.
If we wanted the second tree,
we could ask for the commit pointed to by the tag, and so on.
So, to keep all the information and history on the three versions of this tree,
Git stores 16 immutable, signed, compressed objects.
