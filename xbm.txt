Distributed Workflow Examples
Now we’ve gone over most of the basic commands
that you’ll use on a day to day basis as a single developer.
This chapter covers some examples of what you will use
in order to collaborate with other developers on a code base.
Cloning
If you want to begin working on an existing project,
you will need to get an initial version of it
– copy its repository of objects and references to your machine.
This is done with a clone.
Git can clone a repository over several transports,
including local, HTTP, HTTPS, SSH, its own git protocol, and rsync.
The git protocol and SSH are preferred because they are more efficient and not difficult to set up.
When you clone a repository,
it in essence copies all the git objects to a new directory,
checks you out a single local branch
named the same as the HEAD branch on the cloned repo (normally ‘master’),
and stores all the other branches under a remote reference by default named ‘origin’.
That means that if we cloned the repo in the previous examples,
instead of ‘story84’ being a local branch you can switch to,
it becomes ‘origin/story84’ that you have to create a local branch
to pull into in order to work on
(eg: ‘git checkout—track story84 origin/story84’)
The ‘—track’ indicates that you may want to pull from
or push to the origin of this branch later,
so remember where it came from.
distributed workflow screencast
This screencast demonstrates a distributed workflow.
It takes two personas,
creating a project in GitHub and pushing to it in the first persona,
then cloning that project in the second.
The second sets up a public,
read-only HTTP repository on his own server.
The first then fetches from that,
merges changes and pushes back to GitHub.
It also demonstrates an instance
in which the Author and Committer fields can differ for a commit.
local clones
Local clones are the simplest types of clones
– it is basically the equivalent of copying the .git directory and doing a checkout.
The only major difference is that it adds all the original branches in as origin branches.
Often you will do this when creating a bare repository
(that is, a repository without a working directory)
for putting on a public server,
or if you’re working with people using a shared repository over NFS or something similar.
$ git clone --bare simplegit/.git simplegit-bare.git
ssh and git transports
Cloning over SSH requires that you have user credentials on the machine you are cloning from.
The git transport does not have this authentication
and so is normally used for fetching only.
$ git clone git@github.com:schacon/ticgit.git ticgit_directory
http and https transports
Another popular way to clone a repository is over HTTP,
just because it is so simple.
You don’t need to setup any special service
or give out user credentials
(made easier by services like gitosis),
you simply scp your bare repository into any web server’s static content directory.
It is not as efficient as the other protocols
– it will transfer loose objects and packfiles over a number of calls instead of packing them up,
but it is simple.
$ git clone http://git.gitorious.org/piston/mainline.git piston
Once you have run one of these commands,
you will have a copy of the git repository,
full of all the history
– basically every blob and tree and commit that project has ever had.
This is really a full backup of the repository
– if the main server ever goes down or gets corrupted,
everyone who has ever cloned it has a fully capable backup that can replace it.
With Git, there is really no single point of failure.
• git clone (http://www.kernel.org/pub/software/scm/git/docs/git-clone.html)
