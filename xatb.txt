Adding and Committing
Now we’ll do some development and periodically commit our changes.
We have a few options here
– we can commit individual files or we can tell the commit command
to automatically add all modified files in our working directory to the index,
then commit it.
A good way to find out what you’re about to commit
(that is, what is in your index)
is to use the status command.
In this example, I can see that I’ve modified three files in my working directory,
but none of them have been added to the index yet
– they are not staged and ready to be committed.
If I want to make these changes in two separate commits,
or I have completed work on some of them and would like to push that out,
I can specify which files to add individually and then commit.
You can see that if we commit at this point, only the Rakefile will show up as changed in the commit.
If we want to commit all our changes,
we can use this shorthand,
which will automatically run a git add on every modified file to our index,
then commit the whole thing:
$ git commit -a -m ‘committing all changes’
If you would like to give a more useful commit message,
you can leave out the -m option.
That will fire up your $EDITOR to add your commit message.
Give special care to the first line of your commit message
– it will often be the only thing people see when they are looking through your commit history.
Now we can continue this loop – modifying, adding and committing – during our development.
• git status (http://www.kernel.org/pub/software/scm/git/docs/git-status.html)
